//
// ContentView.swift
//
// Created by Speedyfriend67 on 10.07.24
//
 
import SwiftUI
import Compression

struct ContentView: View {
    @State private var ipaURL: URL?
    @State private var resultMessage: String = "Select an IPA file to check for Seashell."
    @State private var logMessage: String = ""

    var body: some View {
        VStack {
            Text(resultMessage)
                .padding()
            
            Button("Select IPA File") {
                selectIPAFile()
            }
            .padding()
            
            Text(logMessage)
                .padding()
                .foregroundColor(.gray)
        }
    }
    
    private func selectIPAFile() {
        let documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: [.data])
        let coordinator = ContextCoordinator(self)
        documentPicker.delegate = coordinator
        UIApplication.shared.connectedScenes
            .compactMap { ($0 as? UIWindowScene)?.keyWindow }
            .first?
            .rootViewController?
            .present(documentPicker, animated: true, completion: nil)
    }
    
    private func checkIPAforSeashell(ipaURL: URL) {
        let destinationURL = getDocumentsDirectory().appendingPathComponent("unzippedIPA")
        
        do {
            logMessage = "Unzipping IPA file..."
            try unzipFile(at: ipaURL, to: destinationURL)
        } catch {
            resultMessage = "Error unzipping IPA: \(error)"
            logMessage = ""
            return
        }
        
        logMessage = "Checking for 'mussel' file..."
        let fileManager = FileManager.default
        let musselFileURL = destinationURL.appendingPathComponent("mussel")
        if fileManager.fileExists(atPath: musselFileURL.path) {
            resultMessage = "Seashell detected: 'mussel' file found."
            logMessage = ""
            return
        }
        
        logMessage = "Searching for CFBundleBase64Hash key..."
        if let enumerator = fileManager.enumerator(at: destinationURL, includingPropertiesForKeys: nil) {
            for case let fileURL as URL in enumerator {
                if fileURL.pathExtension == "plist" {
                    do {
                        let plistData = try Data(contentsOf: fileURL)
                        if let plistDict = try PropertyListSerialization.propertyList(from: plistData, options: [], format: nil) as? [String: Any] {
                            if plistDict.keys.contains("CFBundleBase64Hash") {
                                resultMessage = "Seashell detected: 'CFBundleBase64Hash' key found in \(fileURL.path)."
                                logMessage = ""
                                return
                            }
                        }
                    } catch {
                        resultMessage = "Error reading plist file: \(error)"
                        logMessage = ""
                        return
                    }
                }
            }
        }
        
        resultMessage = "No Seashell indicators found in IPA."
        logMessage = ""
    }
    
    private func getDocumentsDirectory() -> URL {
        let paths = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
        return paths[0]
    }
    
    private func unzipFile(at sourceURL: URL, to destinationURL: URL) throws {
        let fileManager = FileManager.default
        if !fileManager.fileExists(atPath: destinationURL.path) {
            try fileManager.createDirectory(at: destinationURL, withIntermediateDirectories: true, attributes: nil)
        }
        
        let fileData = try Data(contentsOf: sourceURL)
        let sourceBuffer = [UInt8](fileData)
        let bufferSize = 32_768
        
        try sourceBuffer.withUnsafeBufferPointer { sourcePointer in
            var destinationBuffer = [UInt8](repeating: 0, count: bufferSize)
            
            let streamPointer = UnsafeMutablePointer<compression_stream>.allocate(capacity: 1)
            defer {
                streamPointer.deallocate()
            }
            
            var stream = streamPointer.pointee
            var status = compression_stream_init(&stream, COMPRESSION_STREAM_DECODE, COMPRESSION_ZLIB)
            guard status != COMPRESSION_STATUS_ERROR else { throw NSError(domain: "UnzipError", code: 0, userInfo: nil) }
            
            stream.src_ptr = sourcePointer.baseAddress!
            stream.src_size = sourceBuffer.count
            
            while status == COMPRESSION_STATUS_OK {
                let destinationBufferSize = destinationBuffer.count
                try destinationBuffer.withUnsafeMutableBufferPointer { destinationPointer in
                    stream.dst_ptr = destinationPointer.baseAddress!
                    stream.dst_size = destinationBufferSize
                    
                    status = compression_stream_process(&stream, 0)
                    
                    let outputData = Data(bytes: destinationPointer.baseAddress!, count: destinationBufferSize - stream.dst_size)
                    let outputPath = destinationURL.appendingPathComponent(UUID().uuidString)
                    try outputData.write(to: outputPath)
                }
            }
            
            guard status == COMPRESSION_STATUS_END else { throw NSError(domain: "UnzipError", code: 0, userInfo: nil) }
            compression_stream_destroy(&stream)
        }
    }
    
    class ContextCoordinator: NSObject, UIDocumentPickerDelegate {
        var parent: ContentView
        
        init(_ parent: ContentView) {
            self.parent = parent
        }
        
        func documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
            if let selectedURL = urls.first {
                parent.ipaURL = selectedURL
                parent.checkIPAforSeashell(ipaURL: selectedURL)
            }
        }
        
        func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {
            parent.resultMessage = "Document picker was cancelled."
        }
    }
}

